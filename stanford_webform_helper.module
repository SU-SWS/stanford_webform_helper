<?php

/**
 * @file
 * stanford_webform_helper.module
 */

use \phpseclib\Net\SFTP;

/**
 * Implements hook_menu().
 */
function stanford_webform_helper_menu() {
  $items = array();
  $items['node/%webform_menu/webform/ftp'] = array(
    'title' => 'SFTP Results',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_webform_helper_sftp_form', 1),
    'access callback' => 'webform_node_update_access',
    'access arguments' => array(1),
    'file' => 'stanford_webform_helper.forms.inc',
    'weight' => 7,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function stanford_webform_helper_theme($existing, $type, $theme, $path) {
  return array(
    'stanford_webform_helper_sftp_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Theme the sftp configuratino form.
 */
function theme_stanford_webform_helper_sftp_form(&$vars) {
  $form = $vars['form'];

  $rows = array();
  foreach (element_children($form['sftp_settings']['field_order']) as $cid) {
    $form['sftp_settings']['field_order'][$cid]['weight']['#attributes']['class'] = array('fields-order-table-weight');
    $rows[] = array(
      'data' => array(
        array('class' => array('slide-cross')),
        drupal_render($form['sftp_settings']['field_order'][$cid]['key']),
        drupal_render($form['sftp_settings']['field_order'][$cid]['weight']),
      ),
      'class' => array('draggable'),
    );
  }

  $header = array(
    '',
    t('Field Key'),
    t('Weight'),
  );

  $form['sftp_settings']['field_order']['order']['#markup'] = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'fields-order-table'),
  ));

  $output = drupal_render_children($form);
  drupal_add_tabledrag('fields-order-table', 'order', 'sibling', 'fields-order-table-weight');

  return $output;
}

/**
 * Implements hook_node_delete().
 */
function stanford_webform_helper_node_delete($node) {
  $sftp = variable_get('stanford_webform_helper_sftp', array());
  if (isset($sftp[$node->nid])) {
    unset($sftp[$node->nid]);
    variable_set('stanford_webform_helper_sftp', $sftp);
  }
}

/**
 * Implements hook_webform_submission_insert().
 */
function stanford_webform_helper_webform_submission_insert($node, $submission) {
  $sftp = variable_get('stanford_webform_helper_sftp', array());
  if (!isset($sftp[$node->nid]) || !$sftp[$node->nid]['enabled']) {
    return;
  }

  $csv_data = array();
  $webform = $node->webform;
  $submission_data = $submission->data;

  $components = _stanford_webform_helper_get_weighted_components($node);
  foreach ($components as $cid) {
    $form_key = $webform['components'][$cid]['form_key'];
    $csv_data[$form_key] = implode('; ', $submission_data[$cid]);

    if ($webform['components'][$cid]['type'] == 'file' && $submission_data[$cid]) {
      if ($file = file_load(reset($submission_data[$cid]))) {
        $csv_data[$form_key] = file_create_url($file->uri);
      }
    }
  }

  if (!array_filter($csv_data)) {
    return;
  }

  $filename = webform_replace_tokens($sftp[$node->nid]['filename'], $node, $submission);
  $file_path = "public://webform/$filename.csv";
  $file = fopen($file_path, 'w+');
  fputcsv($file, array_keys($csv_data));
  fputcsv($file, $csv_data);
  fclose($file);

  if (stanford_webform_helper_upload_file($file_path, $sftp[$node->nid], $node->nid)) {
    watchdog('stanford_webform_helper', 'Successfully uploaded csv to SFTP server on webform !nid', array('!nid' => $node->nid));
  }
  else {
    watchdog('stanford_webform_helper', 'Failed uploading csv to SFTP server on webform !nid', array('!nid' => $node->nid), WATCHDOG_ERROR);
  }
  file_unmanaged_delete($file_path);
}

/**
 * Get the order of components depending if they are customized or not.
 *
 * @param object $node
 *   Webform node object.
 *
 * @return array
 *   Array of component id's in the correct weighted order.
 */
function _stanford_webform_helper_get_weighted_components($node) {
  $sftp = variable_get('stanford_webform_helper_sftp', array());
  $components = array();
  foreach ($node->webform['components'] as $cid => $component) {
    $components[$cid] = $component['weight'];
  }

  if ($sftp[$node->nid]['customize_field_order']) {
    foreach ($sftp[$node->nid]['field_order'] as $cid => $weight) {
      if (isset($components[$cid])) {
        $components[$cid] = $weight;
      }
    }
  }
  asort($components);
  return array_keys($components);
}

/**
 * Implements hook_webform_submission_update().
 */
function stanford_webform_helper_webform_submission_update($node, $submission) {
  stanford_webform_helper_webform_submission_insert($node, $submission);
}

/**
 * Upload the given file to the configured SFTP server.
 *
 * @param string $file
 *   The local file to upload.
 * @param array $connection_info
 *   Keyed array of the username, password, etc for the SFTP connection.
 * @param int $nid
 *   The node id of the webform being used.
 *
 * @return bool
 *   If successful.
 */
function stanford_webform_helper_upload_file($file, array $connection_info, $nid) {
  $remote = basename($file);
  $dir = $connection_info['directory'] ? $connection_info : '/';
  $remote_file = "$dir/$remote";

  $host = $connection_info['sftp'];
  $port = $connection_info['port'];
  $username = $connection_info['username'];
  $password = decrypt(serialize($connection_info['password']));

  if ($connection_info['ftp']) {
    return stanford_webform_helper_ftp_send_file($host, $username, $password, $dir, $file, $port);
  }
  else {
    require_once 'vendor/autoload.php';

    // Establish connection.
    $sftp = new SFTP($host, $port);
    if ($sftp->login($username, $password)) {

      // Send the file.
      if ($sftp->put($remote_file, file_get_contents($file))) {
        return TRUE;
      }
    }
    else {
      watchdog('stanford_webform_helper', 'Login Failed. node: !nid', array('!nid' => $nid));
    }

  }

  return FALSE;
}

/**
 * Upload local file to FTP server using SSL.
 *
 * @param string $host
 *   FTP host url.
 * @param string $username
 *   FTP Username.
 * @param string $password
 *   FTP Password.
 * @param string $host_dir
 *   Path to the destination_directory.
 * @param string $uri
 *   File uri.
 * @param int $port
 *   Port to use.
 *
 * @return bool
 *   If the upload was successful
 */
function stanford_webform_helper_ftp_send_file($host, $username, $password, $host_dir, $uri, $port = 22) {
  $connection = ftp_ssl_connect($host, $port, 15);
  $error = FALSE;
  $local_file = drupal_realpath($uri);
  $remote_file = "$host_dir/" . basename($uri);
  if (ftp_login($connection, $username, $password)) {
    ftp_pasv($connection, TRUE);
    // Send the file.
    if (!ftp_put($connection, $remote_file, $local_file, FTP_ASCII)) {
      $error = t('Unable to send file');
    }
  }
  else {
    $error = t('Unable to log into server');
  }

  ftp_close($connection);

  if ($error) {
    watchdog('stanford_webform_helper', 'Error uploading file to ftp server. Message: %message', array('%message' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_webform_component_insert().
 */
function stanford_webform_helper_webform_component_insert($component) {
  $nid = $component['nid'];
  $sftp = variable_get('stanford_webform_helper_sftp', array());
  if (isset($sftp[$nid]) && $sftp[$nid]['enabled'] && $sftp[$nid]['customize_field_order']) {
    drupal_set_message(t('New field added. Please make sure the fields are in the correct order for the csv upload at !link', array('!link' => l("node/$nid/webform/ftp", "node/$nid/webform/ftp"))));
  }
}
